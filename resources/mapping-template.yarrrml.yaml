
prefixes:
  ex: "http://example.com/ns#"
  o-steps: "https://fast.ilabt.imec.be/ns/oslo-steps/0.2#"
  sh: "http://www.w3.org/ns/shacl#"
  o-persoon: "https://data.vlaanderen.be/ns/persoon#"
  rdfs: "http://www.w3.org/2000/01/rdf-schema#"
  xl: "http://www.w3.org/2008/05/skos-xl#"
  xsd: "http://www.w3.org/2001/XMLSchema#"
  grel: "http://users.ugent.be/~bjdmeest/function/grel.ttl#"
  idlab-fn: "https://w3id.org/imec/idlab/function#"

sources:
  shapes-source: ['@@SHAPES.CSV@@~csv']
  states-source: ['@@STATES.CSV@@~csv']
  steps-source:
    access: '@@STEPS.JSON@@'
    referenceFormulation: jsonpath
    iterator: $[*]

targets:
  shapes-target: ['@@SHAPES.TTL@@~void', turtle]
  states-target: ['@@STATES.TTL@@~void', turtle]
  steps-target: ['@@STEPS.TTL@@~void', turtle]


mappings:

  ###########################
  # mapping of state shapes #
  ###########################
  shape:
    sources: shapes-source
    subjects:
      - value: http://example.com/shapes#$(name)
        targets: shapes-target
    po:
      - [a, o-steps:StateShape]
      - [rdfs:label, 'TODO: provide a description']
      - [sh:TargetClass, o-persoon:Inwoner]
      - predicate: sh:property
        object:
          - mapping: propertyShape

  # The property shapes are the actual shapes. This generates no actual content:
  # it is up to the user to define the SHACL shapes
  propertyShape:
    sources: shapes-source
    subjects:
      - value: http://example.com/shapes#$(name)PropertyShape
        targets: shapes-target
    po:
      - [a, sh:PropertyShape ]
      - [rdfs:label, 'TODO: provide a description']
      - [sh:path, ex:has$(name)~iri]
      - [sh:dataType, xsd:boolean]
      - [sh:minCount, '1', xsd:integer]
      - [sh:maxCount, '1', xsd:integer]
      - [sh:pattern, 'true']


  #####################
  # mapping of states #
  #####################      
  states:
    sources: states-source
    subjects:
      - value: http://example.com/states#$(name)
        targets: states-target
    po:
      - [a, o-steps:State ]
      - [rdfs:label, $(description)]
      - predicate: o-steps:hasStateShape
        object:
          - mapping: shape
            condition:
              function: equal
              parameters:
                - [str1, $(name), o]
                - [str2, $(shape), s]

  ####################
  # mapping of steps #
  ####################   
  steps:
    sources: steps-source
    subjects:
      - value: http://example.com/steps#$(name)
        targets: steps-target
    po:
      - [a, https://fast.ilabt.imec.be/ns/oslo-steps/0.2#$(levels)LevelStep ]
      - predicate: o-steps:hasDescription
        objects:
          - mapping: stepsDescriptions
      - [o-steps:requiresState, http://example.com/states#$(start_states)~iri]
      - predicate: o-steps:requiresState
        objects:
          - value: o-steps:emptyState
            type: iri
        condition:
          function: equal
          parameters:
            - [grel:valueParameter, 0]
            - parameter: grel:valueParameter2
              value:
                function: grel:array_length
                parameters:
                  - [grel:p_array_a, $(start_states)]
      - [o-steps:producesState, http://example.com/states#$(end_states)~iri]

  stepsDescriptions:
    sources: steps-source
    subjects:
      - value: http://example.com/steps#$(name)Description
        targets: steps-target
    po:
      - [xl:literalForm, $(description)]
